generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        String   @id @default(cuid())
  address   String   @unique
  symbol    String
  name      String
  decimals  Int
  supply    BigInt?
  price     Float?
  marketCap Float?
  volume24h Float?
  liquidity Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Analysis data
  rugScore       Float?
  safetyScore    Float?
  liquidityScore Float?
  volumeScore    Float?
  overallScore   Float?

  // Metadata
  website     String?
  telegram    String?
  twitter     String?
  description String?

  // Relations
  prices   TokenPrice[]
  alerts   Alert[]
  analyses TokenAnalysis[]

  @@map("tokens")
}

model TokenPrice {
  id        String   @id @default(cuid())
  tokenId   String
  price     Float
  volume    Float?
  marketCap Float?
  timestamp DateTime @default(now())

  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, timestamp])
  @@map("token_prices")
}

model TokenAnalysis {
  id           String   @id @default(cuid())
  tokenId      String
  analysisType String
  score        Float
  data         Json
  timestamp    DateTime @default(now())

  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, analysisType])
  @@map("token_analyses")
}

model Alert {
  id          String    @id @default(cuid())
  tokenId     String
  userId      String?
  type        String
  condition   Json
  isActive    Boolean   @default(true)
  isTriggered Boolean   @default(false)
  createdAt   DateTime  @default(now())
  triggeredAt DateTime?

  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, isActive])
  @@map("alerts")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  filters Filter[]

  @@map("users")
}

model Filter {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  criteria    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("filters")
}

model SystemMetrics {
  id         String   @id @default(cuid())
  metricType String
  value      Float
  metadata   Json?
  timestamp  DateTime @default(now())

  @@index([metricType, timestamp])
  @@map("system_metrics")
}
