
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  address: 'address',
  symbol: 'symbol',
  name: 'name',
  decimals: 'decimals',
  supply: 'supply',
  price: 'price',
  marketCap: 'marketCap',
  volume24h: 'volume24h',
  liquidity: 'liquidity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rugScore: 'rugScore',
  safetyScore: 'safetyScore',
  liquidityScore: 'liquidityScore',
  volumeScore: 'volumeScore',
  overallScore: 'overallScore',
  website: 'website',
  telegram: 'telegram',
  twitter: 'twitter',
  description: 'description'
};

exports.Prisma.TokenPriceScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  price: 'price',
  volume: 'volume',
  marketCap: 'marketCap',
  timestamp: 'timestamp'
};

exports.Prisma.TokenAnalysisScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  analysisType: 'analysisType',
  score: 'score',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  userId: 'userId',
  type: 'type',
  condition: 'condition',
  isActive: 'isActive',
  isTriggered: 'isTriggered',
  createdAt: 'createdAt',
  triggeredAt: 'triggeredAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FilterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  criteria: 'criteria',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemMetricsScalarFieldEnum = {
  id: 'id',
  metricType: 'metricType',
  value: 'value',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Token: 'Token',
  TokenPrice: 'TokenPrice',
  TokenAnalysis: 'TokenAnalysis',
  Alert: 'Alert',
  User: 'User',
  Filter: 'Filter',
  SystemMetrics: 'SystemMetrics'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/galaxy/Documents/memecoin-trading-algo/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/galaxy/Documents/memecoin-trading-algo/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Token {\n  id        String   @id @default(cuid())\n  address   String   @unique\n  symbol    String\n  name      String\n  decimals  Int\n  supply    BigInt?\n  price     Float?\n  marketCap Float?\n  volume24h Float?\n  liquidity Float?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Analysis data\n  rugScore       Float?\n  safetyScore    Float?\n  liquidityScore Float?\n  volumeScore    Float?\n  overallScore   Float?\n\n  // Metadata\n  website     String?\n  telegram    String?\n  twitter     String?\n  description String?\n\n  // Relations\n  prices   TokenPrice[]\n  alerts   Alert[]\n  analyses TokenAnalysis[]\n\n  @@map(\"tokens\")\n}\n\nmodel TokenPrice {\n  id        String   @id @default(cuid())\n  tokenId   String\n  price     Float\n  volume    Float?\n  marketCap Float?\n  timestamp DateTime @default(now())\n\n  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)\n\n  @@index([tokenId, timestamp])\n  @@map(\"token_prices\")\n}\n\nmodel TokenAnalysis {\n  id           String   @id @default(cuid())\n  tokenId      String\n  analysisType String\n  score        Float\n  data         Json\n  timestamp    DateTime @default(now())\n\n  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)\n\n  @@index([tokenId, analysisType])\n  @@map(\"token_analyses\")\n}\n\nmodel Alert {\n  id          String    @id @default(cuid())\n  tokenId     String\n  userId      String?\n  type        String\n  condition   Json\n  isActive    Boolean   @default(true)\n  isTriggered Boolean   @default(false)\n  createdAt   DateTime  @default(now())\n  triggeredAt DateTime?\n\n  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)\n\n  @@index([tokenId, isActive])\n  @@map(\"alerts\")\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  username  String?  @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  filters Filter[]\n\n  @@map(\"users\")\n}\n\nmodel Filter {\n  id          String   @id @default(cuid())\n  userId      String\n  name        String\n  description String?\n  criteria    Json\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId, isActive])\n  @@map(\"filters\")\n}\n\nmodel SystemMetrics {\n  id         String   @id @default(cuid())\n  metricType String\n  value      Float\n  metadata   Json?\n  timestamp  DateTime @default(now())\n\n  @@index([metricType, timestamp])\n  @@map(\"system_metrics\")\n}\n",
  "inlineSchemaHash": "212e834b66bff6ceb6f3a00276021a4ba1a48501a1f40d322c812c4e866983bc",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Token\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"symbol\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"decimals\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"supply\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"marketCap\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"volume24h\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"liquidity\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rugScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"safetyScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"liquidityScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"volumeScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"overallScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"telegram\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twitter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"prices\",\"kind\":\"object\",\"type\":\"TokenPrice\",\"relationName\":\"TokenToTokenPrice\"},{\"name\":\"alerts\",\"kind\":\"object\",\"type\":\"Alert\",\"relationName\":\"AlertToToken\"},{\"name\":\"analyses\",\"kind\":\"object\",\"type\":\"TokenAnalysis\",\"relationName\":\"TokenToTokenAnalysis\"}],\"dbName\":\"tokens\"},\"TokenPrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"volume\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"marketCap\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenToTokenPrice\"}],\"dbName\":\"token_prices\"},\"TokenAnalysis\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"analysisType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenToTokenAnalysis\"}],\"dbName\":\"token_analyses\"},\"Alert\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"condition\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isTriggered\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"triggeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"token\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"AlertToToken\"}],\"dbName\":\"alerts\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"filters\",\"kind\":\"object\",\"type\":\"Filter\",\"relationName\":\"FilterToUser\"}],\"dbName\":\"users\"},\"Filter\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"criteria\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FilterToUser\"}],\"dbName\":\"filters\"},\"SystemMetrics\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metricType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"system_metrics\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

