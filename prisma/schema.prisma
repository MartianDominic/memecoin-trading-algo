generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id                String    @id @default(cuid())
  address           String    @unique
  symbol            String
  name              String
  decimals          Int
  supply            BigInt?
  price             Float?
  marketCap         Float?
  volume24h         Float?
  liquidity         Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Additional fields for API compatibility
  chain             String?   @default("solana")
  logoUrl           String?
  totalSupply       BigInt?
  circulatingSupply BigInt?
  launchDate        DateTime?

  // Analysis data
  rugScore          Float?
  safetyScore       Float?
  liquidityScore    Float?
  volumeScore       Float?
  overallScore      Float?

  // Metadata
  website           String?
  telegram          String?
  twitter           String?
  description       String?

  // Relations
  prices            TokenPrice[]
  alerts            Alert[]
  analyses          TokenAnalysis[]
  priceData         PriceData[]
  safetyScores      SafetyScore[]
  tradingSignals    TradingSignal[]

  @@map("tokens")
}

model TokenPrice {
  id        String    @id @default(cuid())
  tokenId   String
  price     Float
  volume    Float?
  marketCap Float?
  timestamp DateTime  @default(now())

  token     Token     @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("token_prices")
  @@index([tokenId, timestamp])
}

model TokenAnalysis {
  id            String    @id @default(cuid())
  tokenId       String
  analysisType  String
  score         Float
  data          Json
  timestamp     DateTime  @default(now())

  token         Token     @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("token_analyses")
  @@index([tokenId, analysisType])
}

model Alert {
  id          String    @id @default(cuid())
  tokenId     String
  userId      String?
  type        String
  condition   Json
  isActive    Boolean   @default(true)
  isTriggered Boolean   @default(false)
  createdAt   DateTime  @default(now())
  triggeredAt DateTime?

  token       Token     @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("alerts")
  @@index([tokenId, isActive])
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  filters   Filter[]

  @@map("users")
}

model Filter {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  criteria    Json
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("filters")
  @@index([userId, isActive])
}

model SystemMetrics {
  id            String    @id @default(cuid())
  metricType    String
  value         Float
  metadata      Json?
  timestamp     DateTime  @default(now())

  @@map("system_metrics")
  @@index([metricType, timestamp])
}

model PriceData {
  id        String   @id @default(cuid())
  tokenId   String
  price     Float
  high24h   Float?
  low24h    Float?
  change1h  Float?
  change24h Float?
  change7d  Float?
  volume    Float?
  timestamp DateTime @default(now())

  token     Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("price_data")
  @@index([tokenId, timestamp])
}

model TradingSignal {
  id        String   @id @default(cuid())
  tokenId   String
  type      String
  strength  Float
  reason    String?
  data      Json?
  timestamp DateTime @default(now())

  token     Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("trading_signals")
  @@index([tokenId, type])
}

model SafetyScore {
  id              String   @id @default(cuid())
  tokenId         String
  rugScore        Float
  liquidityScore  Float
  ownershipScore  Float
  overallScore    Float
  details         Json?
  timestamp       DateTime @default(now())

  token           Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@map("safety_scores")
  @@index([tokenId, timestamp])
}